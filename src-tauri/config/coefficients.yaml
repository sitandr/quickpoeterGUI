# asympt — пропорциональность параметра длине слова, чтобы не поощрять более длинные слова, следует
# разделить на минимальную длину^asympt; в силу специфики алгоритмов asympt будут разными
# weight — "вес" параметра, не указывается, если можно понизить остальные коэффициенты и получить
# то же самое

misc:
  same_cons_end: 0.05 # +, если оба имеют/не имеют согласных на концах
  length_diff_fine: 0.30 # −(длина₁/длина₂ - 1)·length_diff_fine; длина₁ ≥ длины₂

stresses:
  # для каждой соотв. пары гласных assonanse_distance = Σ Δassonance_vectors² (см. convertation.yaml)
  k_not_strict_stress:  2.0 # − k · assonanse_distance, если нестрогое ударение с отсутствием ударения
  k_strict_stress:      10.0 # -//-, если оба ударения есть
  bad_rythm:            50 # чистый штраф, если не совпадают по ритму (строгий ударный со строгим безударным)
  # no stress -> 1.0

  asympt:               1.0
  weight:               26.0

consonant_structure:
  # для каждого слога −(длина_слога₁ − длина_слога₂)^pow
  pow:    2.0

  weight: 0.2
  asympt: 1.0

alliteration:
  # для каждых двух согласных вычисляется
  # (номера слога и букв — с конца) 
  # d1 = номер_слога₁ + номер_буквы₁ / (длина_слога₁ + длина_слога₂)
  # d2 = номер_слога₂ + номер_буквы₂ / (длина_слога₁ + длина_слога₂)
  # k = (|d₁ - d₂| + shift_coord)^pow_coord_delta · (d₁ + d₂ + shift_syll_ending)^pow_syll_ending 
  #                ↑                                         ↑
  #   отвечает за расстояние между буквами    отвечает за важность совпадения более близких к концу согласных
  #
  # и суммируется близость_согласных/k 

  shift_coord:           1.0
  shift_syll_ending:     1.0
  pow_coord_delta:       3.0
  pow_syll_ending:       1.0

  weight:                5.0
  asympt:                1.5

meaning:
  weight: 2.0